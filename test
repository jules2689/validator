#!/usr/bin/ruby --disable-gems

require_relative 'db_test_data'
require_relative 'host_test_data'
require_relative 'length_depth_data'

def test_validation(validation, config, errors: {})
  v = Validator.new(validation)
  v.validate!(config)

  if errors.empty?
    if v.valid?
      puts "✅  Validation passed"
    else
      puts "❌ Validation failed. #{v.errors.inspect} was supposed to be empty"
    end
  else
    if !v.valid?
      puts "✅  Errors were detected."
      if errors != v.errors
        puts "❌ Errors were supposed to be #{errors.inspect} not #{v.errors.inspect}"
      else
        puts "✅  Errors matched."
      end
    else
      puts "❌ Validation succeed. It was supposed to fail"
    end
  end
  puts "\n\n"
end

puts "Validating DB Valid Config"
test_validation(db_validation, db_valid_config)

puts "Validating DB Invalid Config"
test_validation(db_validation, db_invalid_config, errors: {
  "database.bootstrap" => ["was required"],
  "database.migrate" => ["was required"],
  "database.user" => ["was required"],
  "database.password" => ["was required"],
  "database.database" => ["was required"]
})

puts "Validating Host Valid Config"
test_validation(host_validation, host_valid_config)

puts "Validating Host Invalid Config"
test_validation(host_validation, host_invalid_config, errors: {
  "config.host" => ["must match a regex for one of (ip, host), but not_a_host did not"]
})

puts "Validating length and depth valid"
test_validation(length_validation, length_valid_config)

puts "Validating length and depth - Hash Invalid"
test_validation(length_validation, length_hash_invalid_config, errors: {
  "config" => ["cannot have more than 2 elements, but has 3 elements"]
})

puts "Validating length and depth - Array Invalid"
test_validation(length_validation, length_array_invalid_config, errors: {
  "configArray" => ["cannot have more than 2 elements, but has 3 elements"]
})

puts "Validating length and depth - Nested Hash Invalid"
test_validation(length_validation, length_nested_hash_invalid_config, errors: {
  "configHashNested.thing" => ["cannot have more than 2 elements, but has 3 elements"]
})

puts "Validating length and depth - String Invalid"
test_validation(length_validation, length_string_invalid_config, errors: {
  "string" => ["cannot be longer than 5 characters, but was 7 in length"]
})
